/**
 * @name Randomizer
 * @author Yimikami
 * @description Randomizes champion, runes, and item set for you
 * @link https://github.com/Yimikami/pengu-plugins/
 * @version 0.0.1
 */

class A{constructor(t){this.champions=[],this.cache=null,this.CACHE_DURATION=5*60*1e3,this.MAX_RETRIES=3,this.INITIAL_RETRY_DELAY=1e3,this.context=t}isCacheValid(){return this.cache?Date.now()-this.cache.timestamp<this.CACHE_DURATION:!1}async fetchWithRetry(t=0){try{const e=await fetch("/lol-champions/v1/owned-champions-minimal");if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return(await e.json()).filter(a=>a.ownership.owned||a.ownership.rental&&a.ownership.rental.endDate>Date.now()||a.ownership.loyaltyReward||a.ownership.xboxGPReward)}catch(e){if(t<this.MAX_RETRIES){const a=this.INITIAL_RETRY_DELAY*Math.pow(2,t);return window.Toast.error(`Retrying champion fetch (Attempt ${t+1}/${this.MAX_RETRIES})`),await new Promise(s=>setTimeout(s,a)),this.fetchWithRetry(t+1)}throw e}}async fetchOwnedChampions(){try{return this.isCacheValid()?this.cache.data:(this.champions=await this.fetchWithRetry(),this.cache={data:this.champions,timestamp:Date.now()},this.champions)}catch(t){throw window.Toast.error("Failed to fetch champion pool after multiple retries"),t}}getAvailableChampions(){return this.isCacheValid()?this.cache.data:this.champions}async refreshChampionPool(t=!1){(t||!this.isCacheValid())&&await this.fetchOwnedChampions()}isChampionAvailable(t){return this.getAvailableChampions().some(e=>e.id===t)}clearCache(){this.cache=null}}class O{constructor(t){this.spells=[],this.cache=null,this.SPELL_ENDPOINT="/lol-game-data/assets/v1/summoner-spells.json",this.CACHE_DURATION=5*60*1e3,this.context=t}isCacheValid(){return this.cache?Date.now()-this.cache.timestamp<this.CACHE_DURATION:!1}async fetchAvailableSpells(){try{if(this.isCacheValid())return this.spells=this.cache.data,this.spells;const t=await fetch(this.SPELL_ENDPOINT);if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const e=await t.json();return this.spells=e.filter(a=>a.gameModes.includes("CLASSIC")),this.cache={data:this.spells,timestamp:Date.now()},this.spells}catch(t){throw console.error("Error fetching spells:",t),window.Toast.error("Failed to fetch summoner spells"),t}}async randomizeSpells(){try{if(this.spells.length===0&&await this.fetchAvailableSpells(),this.isCacheValid()&&this.cache&&(this.spells=this.cache.data),this.spells.length<2)return window.Toast.error("Not enough summoner spells available"),null;const t=Math.floor(Math.random()*this.spells.length),e=this.spells[t];let a;do a=Math.floor(Math.random()*this.spells.length);while(a===t);const s=this.spells[a],o=[e.id,s.id];return await this.setSpells(e.id,s.id),o}catch(t){throw console.error("Error randomizing spells:",t),window.Toast.error("Failed to randomize summoner spells"),t}}async setSpells(t,e){try{const a=await fetch("/lol-champ-select/v1/session/my-selection",{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({spell1Id:t,spell2Id:e})});if(!a.ok){const s=await a.text();throw console.error("Failed to set spells. Status:",a.status,"Error:",s),new Error(`HTTP error! status: ${a.status}`)}await a.text()}catch(a){throw console.error("Error setting spells:",a),window.Toast.error("Failed to set summoner spells"),a}}clearCache(){this.cache=null}}class v{constructor(t){this.CACHE_DURATION=5*60*1e3,this.itemCache=new Map,this.lastCacheUpdate=0,this.context=t}async fetchItems(){try{const t=await fetch("/lol-game-data/assets/v1/items.json");if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(t){throw window.Toast.error("Failed to fetch items data"),t}}async getItems(){const t=Date.now();if(t-this.lastCacheUpdate>this.CACHE_DURATION||this.itemCache.size===0){const e=await this.fetchItems();this.itemCache.clear(),e.forEach(a=>{this.isValidItem(a)&&this.itemCache.set(a.id.toString(),a)}),this.lastCacheUpdate=t}return Array.from(this.itemCache.values())}isValidItem(t){try{return t&&t.inStore===!0&&t.displayInItemSets===!0&&t.categories&&Array.isArray(t.categories)&&!t.categories.includes("Trinket")&&!t.requiredChampion&&t.price>0}catch{return!1}}getLegendaryItems(t){return t.filter(e=>!e.categories.includes("Boots")&&!e.categories.includes("Jungle")&&!e.categories.includes("Consumable")&&e.to.length===0&&e.from.length>0&&e.priceTotal>=2800)}getMythicItems(t){return this.getLegendaryItems(t).filter(e=>e.priceTotal>=3200)}getCoreItems(t,e){const a=this.getMythicItems(t).filter(i=>this.isItemRelevantForChampion(i,e)),s=this.getLegendaryItems(t).filter(i=>this.isItemRelevantForChampion(i,e)&&!a.includes(i)),o=this.shuffleArray(a)[0],r=this.shuffleArray(s).slice(0,2);return[o,...r].filter(Boolean)}getSituationalItems(t,e,a){const s=new Set(a.map(r=>r.id.toString())),o=t.filter(r=>!r.categories.includes("Boots")&&!r.categories.includes("Jungle")&&!r.categories.includes("Consumable")&&r.to.length===0&&r.from.length>0&&r.priceTotal>=2500&&!s.has(r.id.toString())&&this.isItemRelevantForChampion(r,e));return this.shuffleArray(o).slice(0,4)}getBootsForBuild(t){const e=this.getBoots(t)[0],a=this.shuffleArray(this.getUpgradedBoots(t))[0];return[e,a].filter(Boolean)}getBoots(t){return t.filter(e=>e.categories.includes("Boots")&&e.to.length>0&&!e.categories.includes("Jungle"))}getUpgradedBoots(t){return t.filter(e=>e.categories.includes("Boots")&&e.to.length===0&&!e.categories.includes("Jungle"))}isItemRelevantForChampion(t,e){const a={Fighter:["Damage","Health","SpellBlock","Armor"],Tank:["Health","SpellBlock","Armor","HealthRegen"],Mage:["SpellDamage","ManaRegen","CooldownReduction","AbilityHaste"],Assassin:["Damage","CriticalStrike","SpellDamage","AttackSpeed","ArmorPenetration","MagicPenetration"],Marksman:["Damage","CriticalStrike","AttackSpeed","ArmorPenetration"],Support:["ManaRegen","Health","SpellDamage","CooldownReduction","AbilityHaste","HealthRegen"],Aggressive:["Damage","SpellDamage","ArmorPenetration","MagicPenetration","CriticalStrike"],Defensive:["Health","Armor","SpellBlock","HealthRegen"],Standard:[]},s=e.map(r=>r.toLowerCase()),o=new Set(s.flatMap(r=>a[r.charAt(0).toUpperCase()+r.slice(1)]||[]));return t.categories.some(r=>o.has(r))}shuffleArray(t){const e=[...t];for(let a=e.length-1;a>0;a--){const s=Math.floor(Math.random()*(a+1));[e[a],e[s]]=[e[s],e[a]]}return e}async getChampionTags(t){try{const e=await fetch(`/lol-game-data/assets/v1/champions/${t}.json`);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);const a=await e.json();return a.tags&&a.tags.length>0?a.tags:a.roles&&a.roles.length>0?a.roles:["Fighter"]}catch{return["Fighter"]}}async getCurrentSummoner(){try{const t=await fetch("/lol-summoner/v1/current-summoner");if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(t){throw t}}async getChampionSpells(t){try{const e=await fetch(`/lol-game-data/assets/v1/champions/${t}.json`);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return(await e.json()).spells.slice(0,3).map((a,s)=>({name:a.name,spellKey:["Q","W","E"][s]}))}catch(e){return console.error("Failed to fetch champion spells:",e),[{name:"Q",spellKey:"Q"},{name:"W",spellKey:"W"},{name:"E",spellKey:"E"}]}}generateSkillOrder(t){return this.shuffleArray([...t]).map(e=>e.spellKey).join(" > ")}async createItemSet(t){const e=await this.getItems(),a=await this.getChampionTags(t),s=await this.getChampionName(t),o=s?.name||t.toString(),r=await this.getChampionSpells(t),i=this.generateSkillOrder(r),m=this.shuffleArray(a)[0],h=this.shuffleArray(["Standard","Aggressive","Defensive",...a])[0];let l=[...a];h==="Aggressive"?l=[...l,m,"Assassin","Fighter"]:h==="Defensive"?l=[...l,m,"Tank","Support"]:h!=="Standard"&&(l=[...l,h,h]);const u=this.getBootsForBuild(e),S=this.getCoreItems(e,l),I=this.getSituationalItems(e,l,S),R=[{type:"Boots",items:u.map(p=>({id:p.id.toString(),count:1})),hideIfSummonerSpell:"",showIfSummonerSpell:""},{type:`Core Items (MAX: ${i})`,items:S.map(p=>({id:p.id.toString(),count:1})),hideIfSummonerSpell:"",showIfSummonerSpell:""},{type:"Situational",items:I.map(p=>({id:p.id.toString(),count:1})),hideIfSummonerSpell:"",showIfSummonerSpell:""}];return{uid:`random-${Date.now()}`,title:`Random ${h} Build - ${o}`,sortrank:0,type:"custom",map:"any",mode:"any",blocks:R,associatedChampions:t?[t]:[],associatedMaps:[11],preferredItemSlots:[],startedFrom:"blank"}}async getChampionName(t){try{const e=await fetch(`/lol-game-data/assets/v1/champions/${t}.json`);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return await e.json()}catch{return null}}async saveItemSet(t){try{const e=await this.getCurrentSummoner();try{await fetch(`/lol-item-sets/v1/item-sets/${e.summonerId}/sets`,{method:"DELETE"})}catch{}const a={accountId:e.accountId,itemSets:[t],timestamp:Date.now()},s=await fetch(`/lol-item-sets/v1/item-sets/${e.summonerId}/sets`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});if(!s.ok){const o=await s.json();throw new Error(`HTTP error! status: ${s.status}, message: ${o.message||"Unknown error"}`)}}catch(e){throw window.Toast.error("Failed to save item set"),e}}async generateRandomItemSet(t){try{const e=await this.createItemSet(t);if(!e.blocks.some(a=>a.items.length>0))throw new Error("Failed to generate any valid items for the build");await this.saveItemSet(e)}catch(e){throw window.Toast.error(e instanceof Error?e.message:"Failed to generate item set"),e}}}const c={PRECISION:8e3,DOMINATION:8100,SORCERY:8200,INSPIRATION:8300,RESOLVE:8400},y={[c.PRECISION]:{KEYSTONES:[8005,8008,8021,8010],SLOT1:[9101,9111,8009],SLOT2:[9104,9105,9103],SLOT3:[8014,8017,8299]},[c.DOMINATION]:{KEYSTONES:[8112,8128,9923],SLOT1:[8126,8139,8143],SLOT2:[8136,8120,8138],SLOT3:[8135,8105,8106]},[c.SORCERY]:{KEYSTONES:[8214,8229,8230],SLOT1:[8224,8226,8275],SLOT2:[8210,8234,8233],SLOT3:[8237,8232,8236]},[c.INSPIRATION]:{KEYSTONES:[8351,8360,8369],SLOT1:[8306,8304,8321],SLOT2:[8313,8352,8345],SLOT3:[8347,8410,8316]},[c.RESOLVE]:{KEYSTONES:[8437,8439,8465],SLOT1:[8446,8463,8401],SLOT2:[8429,8444,8473],SLOT3:[8451,8453,8242]}},w={OFFENSE:[5008,5005,5007],FLEX:[5008,5010,5001],DEFENSE:[5001,5013,5001]};class H{constructor(t){this.runes=[],this.CACHE_DURATION=5*60*1e3,this.lastCacheUpdate=0,this.context=t}async fetchRunes(){try{await this.deleteExistingPages();const t=await fetch("/lol-game-data/assets/v1/perks.json");if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return await t.json()}catch(t){throw window.Toast.error("Failed to fetch rune data"),t}}async deleteExistingPages(){try{const t=await fetch("/lol-perks/v1/pages");if(!t.ok)return;const e=await t.json();await Promise.all(e.map(a=>fetch(`/lol-perks/v1/pages/${a.id}`,{method:"DELETE"})))}catch(t){console.error("Error deleting rune pages:",t)}}async getRunes(){const t=Date.now();return(t-this.lastCacheUpdate>this.CACHE_DURATION||this.runes.length===0)&&(this.runes=await this.fetchRunes(),this.lastCacheUpdate=t),this.runes}async getChampionName(t){try{const e=await fetch(`/lol-game-data/assets/v1/champions/${t}.json`);if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return await e.json()}catch{return null}}getRandomElement(t){return t[Math.floor(Math.random()*t.length)]}getRunesByPath(t,e){return t.filter(a=>Math.floor(a.id/100)*100===e)}async createRandomRunePage(t){const e=this.getRandomElement(Object.values(c)),a=this.getRandomElement(Object.values(c).filter(u=>u!==e)),s=y[e],o=[this.getRandomElement(s.KEYSTONES),this.getRandomElement(s.SLOT1),this.getRandomElement(s.SLOT2),this.getRandomElement(s.SLOT3)],r=y[a],i=[r.SLOT1,r.SLOT2,r.SLOT3],m=this.shuffleArray(i).slice(0,2).map(u=>this.getRandomElement(u)),h=[this.getRandomElement(w.OFFENSE),this.getRandomElement(w.FLEX),this.getRandomElement(w.DEFENSE)],l=await this.getChampionName(t);return{id:0,name:`Random Runes - ${l?.name||t.toString()}`,primaryStyleId:e,subStyleId:a,selectedPerkIds:[...o,...m,...h],current:!0,isTemporary:!1,runeRecommendationId:"",recommendationChampionId:0,isRecommendationOverride:!1,recommendationIndex:-1,quickPlayChampionids:[],order:0}}shuffleArray(t){const e=[...t];for(let a=e.length-1;a>0;a--){const s=Math.floor(Math.random()*(a+1));[e[a],e[s]]=[e[s],e[a]]}return e}async getCurrentRunePage(){try{const t=await fetch("/lol-perks/v1/currentpage");return t.ok?await t.json():null}catch(t){return console.error("Error getting current rune page:",t),null}}async deleteRunePage(t){try{return(await fetch(`/lol-perks/v1/pages/${t}`,{method:"DELETE"})).ok}catch(e){return console.error("Error deleting rune page:",e),!1}}async randomizeRunes(t){try{const e=await this.getCurrentRunePage();e&&e.id&&(await this.deleteRunePage(e.id)||console.warn("Failed to delete current rune page"));const a=await this.createRandomRunePage(t),s=await fetch("/lol-perks/v1/pages",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});if(!s.ok){const o=await s.text();throw new Error(`Failed to save rune page: ${s.status} - ${o}`)}}catch(e){throw console.error("Error randomizing runes:",e),window.Toast.error("Failed to randomize runes"),e}}clearCache(){this.runes=[],this.lastCacheUpdate=0}}class k{constructor(t,e){this.MAX_HISTORY=10,this.HISTORY_WEIGHT_DECAY=.5,this.TIME_DECAY_HOURS=2,this.selectionHistory=[],this.unavailableChampions=new Set,this.context=t,this.championPool=e,this.spellManager=new O(t),this.itemSetManager=new v(t),this.runeManager=new H(t)}addToHistory(t){const e=Date.now();this.selectionHistory.unshift({championId:t,timestamp:e}),this.selectionHistory.length>this.MAX_HISTORY&&this.selectionHistory.pop()}calculateWeight(t){let e=1;const a=this.selectionHistory.find(s=>s.championId===t.id);if(a){const s=(Date.now()-a.timestamp)/36e5,o=Math.min(1,s/this.TIME_DECAY_HOURS),r=this.selectionHistory.findIndex(m=>m.championId===t.id),i=Math.pow(this.HISTORY_WEIGHT_DECAY,this.MAX_HISTORY-r);e*=i+(1-i)*o}return e}weightedRandomSelection(t){const e=t.filter(r=>!this.unavailableChampions.has(r.id));if(e.length===0)return null;const a=e.map(r=>this.calculateWeight(r)),s=a.reduce((r,i)=>r+i,0);let o=Math.random()*s;for(let r=0;r<e.length;r++)if(o-=a[r],o<=0)return e[r];return e[e.length-1]}async randomizeChampion(){try{const t=this.championPool.getAvailableChampions();if(t.length===0&&await this.championPool.refreshChampionPool(),t.filter(a=>!this.unavailableChampions.has(a.id)).length===0)return window.Toast.error("No champions available to select"),null;const e=this.weightedRandomSelection(t);return e?(this.addToHistory(e.id),e.id):(window.Toast.error("Failed to select a champion"),null)}catch(t){throw window.Toast.error("Failed to randomize champion"),t}}markChampionUnavailable(t){this.unavailableChampions.add(t)}async randomizeAll(){try{const t=await this.randomizeChampion();return t?(await Promise.all([this.spellManager.randomizeSpells(),this.runeManager.randomizeRunes(t),this.itemSetManager.generateRandomItemSet(t)]),{success:!0,championId:t}):{success:!1,championId:null}}catch(t){return console.error("Error in randomizeAll:",t),{success:!1,championId:null}}}clearHistory(){this.selectionHistory=[],this.unavailableChampions.clear(),this.runeManager.clearCache()}}class D{handleError(t,e){const a=t instanceof Error?t.message:String(t);console.error(`Error during ${e}:`,a),window.Toast?window.Toast.error(`Failed to ${e}: ${a}`):console.error("Toast notification unavailable")}async withErrorHandling(t,e){try{return await e()}catch(a){return this.handleError(a,t),null}}}const P=`
  #random-button {
    text-transform: uppercase;
    font-family: var(--font-display);
    color: #cdbe91;
  }

  #random-button:hover {
    color: #f0e6d2;
    cursor: pointer;
  }
`,C=document.createElement("style");C.textContent=P;document.head.appendChild(C);let E="",T=!1,f,d,g;function b(n){const{socket:t}=n;f=new A(n),g=new D,d=new k(n,f),t.observe("/lol-gameflow/v1/gameflow-phase",e=>{if(E=e.data,T=E==="ChampSelect",T){g.withErrorHandling("fetch champion pool",()=>f.fetchOwnedChampions());let a=0;const s=10,o=500,r=()=>{const i=document.querySelector(".bottom-right-buttons");i?F(i):a<s&&(a++,setTimeout(r,o))};r()}else d.clearHistory()})}async function N(){try{return(await(await fetch("/lol-summoner/v1/current-summoner")).json()).summonerId}catch(n){return console.error("Failed to get summoner ID:",n),null}}async function M(){try{const n=await N();if(!n)return null;const t=await(await fetch("/lol-champ-select/v1/session")).json(),e=t.myTeam.find(s=>s.summonerId===n);if(!e)return null;const a=t.actions.flat().find(s=>s.actorCellId===e.cellId);return a?.id??null}catch(n){return console.error("Failed to get champion select action:",n),null}}async function L(n){const t=await M();if(!t)return console.error("Failed to get champion select action ID"),!1;try{return(await fetch(`/lol-champ-select/v1/session/actions/${t}`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({championId:n})})).ok}catch{return!1}}function F(n){if(document.getElementById("random-button"))return;const t=document.createElement("lol-uikit-flat-button");t.setAttribute("id","random-button"),t.setAttribute("primary","true"),t.setAttribute("style","position: absolute; right: 10px; bottom: 57px; display: flex; align-items: flex-end;"),t.textContent="LET THE FUN BEGIN \u{1F921}",n.appendChild(t),t.addEventListener("click",async()=>{let e=null;try{const a=await g.withErrorHandling("randomize selections",()=>d.randomizeAll());for(a!=null&&a.success?e=a.championId:e=a?.championId??await g.withErrorHandling("randomize champion",()=>d.randomizeChampion());e!==null&&!await L(e);)d.markChampionUnavailable(e),e=await g.withErrorHandling("randomize champion",()=>d.randomizeChampion())}catch(a){console.error("Failed to randomize:",a)}})}function $(){console.log("Randomizer plugin loaded")}export{b as init,$ as load};
